---
layout:     post
title:      "PHP中9大缓存技术总结"
date:       2014-03-8
author:     "yangyang"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
- PHP中9大缓存技术总结
---
<div class="main">
    <div class="container">
        <div class="row">

            <div class="col-md-9">

                <div class="panel panel-default">
                    <div class="panel-body">
                        <h1 style="margin-top:0;">PHP中9大缓存技术总结</h1>
                        <blockquote>
                            <p>[导读] 1、全页面静态化缓存也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程。此种方式，在CMS系统中比较常见，比如dedecms；一种比较常用的实现方式是用输出缓存：Ob   </p>
                        </blockquote>
                        <div class="php-content">
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">1、全页面静态化缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">也就是将页面全部生成html静态页面，用户访问时直接访问的静态页面，而不会去走php服务器解析的流程。此种方式，在CMS系统中比较常见，比如dedecms；</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">一种比较常用的实现方式是用输出缓存：</p>
<pre class="prettyprint" style="margin-top: 0px; margin-bottom: 0px; color: rgb(0, 0, 102); font-size: 13px; line-height: 19px;">
<code><span class="typ">Ob_start<span class="pun">()<span class="pln">
<span class="pun">******要运行的代码*******<span class="pln">
$content <span class="pun">=<span class="pln"> <span class="typ">Ob_get_contents<span class="pun">();<span class="pln">
<span class="pun">****将缓存内容写入<span class="pln">html<span class="pun">文件*****<span class="pln">
<span class="typ">Ob_end_clean<span class="pun">();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">2、页面部分缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">该种方式，是将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示；可以使用类似于ob_get_contents的方式实现，也可以利用类似ESI之类的页面片段缓存策略，使其用来做动态页面中相对静态的片段部分的缓存(ESI技术，请baidu，此处不详讲)。</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">该种方式可以用于如商城中的商品页；</p>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">3、数据缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">顾名思义，就是缓存数据的一种方式；比如，商城中的某个商品信息，当用商品id去请求时，就会得出包括店铺信息、商品信息等数据，此时就可以将这些数据缓存到一个php文件中，文件名包含商品id来建一个唯一标示；下一次有人想查看这个商品时，首先就直接调这个文件里面的信息，而不用再去数据库查询；其实缓存文件中缓存的就是一个php数组之类；</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">Ecmall商城系统里面就用了这种方式；</p>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">4、查询缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">其实这跟数据缓存是一个思路，就是根据查询语句来缓存；将查询得到的数据缓存在一个文件中，下次遇到相同的查询时，就直接先从这个文件里面调数据，不会再去查数据库；但此处的缓存文件名可能就需要以查询语句为基点来建立唯一标示；</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">按时间变更进行缓存</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">其实，这一条不是真正的缓存方式；上面的2、3、4的缓存技术一般都用到了时间变更判断；就是对于缓存文件您需要设一个有效时间，在这个有效时间内，相同的访问才会先取缓存文件的内容，但是超过设定的缓存时间，就需要重新从数据库中获取数据，并生产最新的缓存文件；比如，我将我们商城的首页就是设置2个小时更新一次；</p>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">5、按内容变更进行缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">这个也并非独立的缓存技术，需结合着用；就是当数据库内容被修改时，即刻更新缓存文件；<br />
                                比如，一个人流量很大的商城，商品很多，商品表必然比较大，这表的压力也比较重；我们就可以对商品显示页进行页面缓存；</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">当商家在后台修改这个商品的信息时，点击保存，我们同时就更新缓存文件；那么，买家访问这个商品信息时，实际上访问的是一个静态页面，而不需要再去访问数据库；</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">试想，如果对商品页不缓存，那么每次访问一个商品就要去数据库查一次，如果有10万人在线浏览商品，那服务器压力就大了；</p>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">6、内存式缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">提到这个，可能大家想到的首先就是Memcached；memcached是高性能的分布式内存缓存服务器。 一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、 提高可扩展性。</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">它就是将需要缓存的信息，缓存到系统内存中，需要获取信息时，直接到内存中取；比较常用的方式就是 key&ndash;&gt;value方式；</p>
<pre class="prettyprint" style="margin-top: 0px; margin-bottom: 0px; color: rgb(0, 0, 102); font-size: 13px; line-height: 19px;">
<code><span class="pun">&lt;?<span class="pln">php
     $memcachehost <span class="pun">=<span class="pln"> <span class="str">&#39;192.168.6.191&#39;<span class="pun">;<span class="pln">
     $memcacheport <span class="pun">=<span class="pln"> <span class="lit">11211<span class="pun">;<span class="pln">
     $memcachelife <span class="pun">=<span class="pln"> <span class="lit">60<span class="pun">;<span class="pln">
     $memcache <span class="pun">=<span class="pln"> <span class="kwd">new<span class="pln"> <span class="typ">Memcache<span class="pun">;<span class="pln">
     $memcache<span class="pun">-&gt;<span class="pln">connect<span class="pun">(<span class="pln">$memcachehost<span class="pun">,<span class="pln">$memcacheport<span class="pun">)<span class="pln"> <span class="kwd">or<span class="pln"> <span class="kwd">die<span class="pln"> <span class="pun">(<span class="str">&quot;Could not connect&quot;<span class="pun">);<span class="pln">
     $memcache<span class="pun">-&gt;<span class="kwd">set<span class="pun">(<span class="str">&#39;key&#39;<span class="pun">,<span class="str">&#39;缓存的内容&#39;<span class="pun">);<span class="pln">
     $get <span class="pun">=<span class="pln"> $memcache<span class="pun">-&gt;<span class="kwd">get<span class="pun">(<span class="pln">$key<span class="pun">);<span class="pln">       <span class="com">//获取信息<span class="pln">
<span class="pun">?&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">7、apache缓存模块</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">apache安装完以后，是不允许被cache的。如果外接了cache或squid服务器要求进行web加速的话，就需要在htttpd.conf里进行设置，当然前提是在安装apache的时候要激活mod_cache的模块。</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">安装apache时：./configure &ndash;enable-cache &ndash;enable-disk-cache &ndash;enable-mem-cache</p>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">8、php APC缓存扩展</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">Php有一个APC缓存扩展，windows下面为php_apc.dll，需要先加载这个模块，然后是在php.ini里面进行配置：</p>
<pre class="prettyprint" style="margin-top: 0px; margin-bottom: 0px; color: rgb(0, 0, 102); font-size: 13px; line-height: 19px;">
<code><span class="pun">[<span class="pln">apc<span class="pun">]<span class="pln">
     extension<span class="pun">=<span class="pln">php_apc<span class="pun">.<span class="pln">dll
     apc<span class="pun">.<span class="pln">rfc1867 <span class="pun">=<span class="pln"> on
     upload_max_filesize <span class="pun">=<span class="pln"> <span class="lit">100M<span class="pln">
     post_max_size <span class="pun">=<span class="pln"> <span class="lit">100M<span class="pln">
     apc<span class="pun">.<span class="pln">max_file_size <span class="pun">=<span class="pln"> <span class="lit">200M<span class="pln">
     upload_max_filesize <span class="pun">=<span class="pln"> <span class="lit">1000M<span class="pln">
     post_max_size <span class="pun">=<span class="pln"> <span class="lit">1000M<span class="pln">
     max_execution_time <span class="pun">=<span class="pln"> <span class="lit">600<span class="pln"> <span class="pun">;<span class="pln">   <span class="pun">每个<span class="pln">PHP<span class="pun">页面运行的最大时间值(秒)，默认<span class="lit">30<span class="pun">秒<span class="pln">
     max_input_time <span class="pun">=<span class="pln"> <span class="lit">600<span class="pln"> <span class="pun">;<span class="pln">       <span class="pun">每个<span class="pln">PHP<span class="pun">页面接收数据所需的最大时间，默认<span class="lit">60<span class="pln">
     memory_limit <span class="pun">=<span class="pln"> <span class="lit">128M<span class="pln"> <span class="pun">;<span class="pln">       <span class="pun">每个<span class="pln">PHP<span class="pun">页面所吃掉的最大内存，默认<span class="lit">8M</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
                            <h2 style="color: rgb(0, 107, 173); background-color: rgb(255, 255, 255); font-size: 21px; font-family: verdana, arial, helvetica, sans-serif; white-space: normal;">9、Opcode缓存</h2>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">我们知道，php的执行流程可以用下图来展示：<br />
                                <img alt="图片描述" src="http://www.php100.com/uploadfile/2015/0919/20150919024343438.jpg" style="border: none;" /><br />
                                首先php代码被解析为Tokens，然后再编译为Opcode码，最后执行Opcode码，返回结果；所以，对于相同的php文件，第一次运行时可以缓存其Opcode码，下次再执行这个页面时，直接会去找到缓存下的opcode码，直接执行最后一步，而不再需要中间的步骤了。</p>
                            <p style="margin: 10px auto; color: rgb(0, 0, 102); font-family: verdana, arial, helvetica, sans-serif; font-size: 13px; line-height: 19px; white-space: normal;">比较知名的是XCache、Turck MM Cache、PHP Accelerator等。</p>
                        </div>
                    </div>
                </div>
                </div>
                </div>
                </div>
                </div>

