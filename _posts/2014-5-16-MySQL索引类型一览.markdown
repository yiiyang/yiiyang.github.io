---
layout:     post
title:      "MySQL索引类型一览 让MySQL高效运行起来"
date:       2014-05-16
author:     "yangyang"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
- MySQL索引类型一览 让MySQL高效运行起来
---
<div class="digest">索引是快速搜索的关键。MySQL索引的建立对于MySQL的高效运行是很重要的。下面介绍几种常见的MySQL索引类型。</div>
<!-- articleBody start -->
<DIV class=articleBody id=artibody>
    <DIV class=guanggao><SPAN id=contentAdv></SPAN></DIV>
    &#160;&#160;&#160;
    </div>
      <SPAN class=top11>       <p>索引是快速搜索的关键。MySQL索引的建立对于MySQL的高效运行是很重要的。下面介绍几种常见的MySQL索引类型。</p>
<p>在数据库表中，对字段建立索引可以大大提高查询速度。假如我们创建了一个 mytable表：</p>
<p>CREATE TABLE mytable(&nbsp;&nbsp; ID INT NOT NULL,&nbsp;&nbsp;&nbsp; username VARCHAR(16) NOT NULL&nbsp; );&nbsp;&nbsp; 我们随机向里面插入了10000条记录，其中有一条：5555, admin。</p>
<p>在查找username=&quot;admin&quot;的记录 SELECT * FROM mytable WHERE username='admin';时，如果在username上已经建立了索引，MySQL无须任何扫描，即准确可找到该记录。相反，MySQL会扫描所有记录，即要查询10000条记录。</p>
<p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索包含多个列。</p>
<p>MySQL索引类型包括：</p>
<p><strong>（1）普通索引</strong></p>
<p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p>
<p>◆创建索引</p>
<p>CREATE INDEX indexName ON mytable(username(length)); 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length，下同。</p>
<p>◆修改表结构</p>
<p>ALTER mytable ADD INDEX [indexName] ON (username(length)) ◆创建表的时候直接指定</p>
<p>CREATE TABLE mytable(&nbsp;&nbsp; ID INT NOT NULL,&nbsp;&nbsp;&nbsp; username VARCHAR(16) NOT NULL,&nbsp;&nbsp; INDEX [indexName] (username(length))&nbsp;&nbsp; );&nbsp; 删除索引的语法：</p>
<p>DROP INDEX [indexName] ON mytable;</p>
<p><strong>（2）唯一索引</strong></p>
<p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p>
<p>◆创建索引</p>
<p>CREATE UNIQUE INDEX indexName ON mytable(username(length)) ◆修改表结构</p>
<p>ALTER mytable ADD UNIQUE [indexName] ON (username(length)) ◆创建表的时候直接指定</p>
<p>CREATE TABLE mytable(&nbsp;&nbsp; ID INT NOT NULL,&nbsp;&nbsp;&nbsp; username VARCHAR(16) NOT NULL,&nbsp;&nbsp; UNIQUE [indexName] (username(length))&nbsp;&nbsp; );&nbsp;</p>
<p><strong>（3）主键索引</strong></p>
<p>它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引：</p>
<p>CREATE TABLE mytable(&nbsp;&nbsp; ID INT NOT NULL,&nbsp;&nbsp;&nbsp; username VARCHAR(16) NOT NULL,&nbsp;&nbsp; PRIMARY KEY(ID)&nbsp;&nbsp; );&nbsp; 当然也可以用 ALTER 命令。记住：一个表只能有一个主键。</p>
<p><strong>（4）组合索引</strong></p>
<p>为了形象地对比单列索引和组合索引，为表添加多个字段：</p>
<p>CREATE TABLE mytable(&nbsp;&nbsp; ID INT NOT NULL,&nbsp;&nbsp;&nbsp; username VARCHAR(16) NOT NULL,&nbsp;&nbsp; city VARCHAR(50) NOT NULL,&nbsp;&nbsp; age INT NOT NULL&nbsp; );&nbsp; 为了进一步榨取MySQL的效率，就要考虑建立组合索引。就是将 name, city, age建到一个索引里：</p>
<p>ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age); 建表时，usernname长度为 16，这里用 10。这是因为一般情况下名字的长度不会超过10，这样会加速索引查询速度，还会减少索引文件的大小，提高INSERT的更新速度。</p>
<p>如果分别在 usernname，city，age上建立单列索引，让该表有3个单列索引，查询时和上述的组合索引效率也会大不一样，远远低于我们的组合索引。虽然此时有了三个索引，但MySQL只能用到其中的那个它认为似乎是最有效率的单列索引。</p>
<p>建立这样的组合索引，其实是相当于分别建立了下面三组组合索引：</p>
<p>usernname,city,age&nbsp;&nbsp; usernname,city&nbsp;&nbsp; usernname&nbsp; 为什么没有 city，age这样的组合索引呢？这是因为MySQL组合索引&ldquo;最左前缀&rdquo;的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引，下面的几个SQL就会用到这个组合索引：</p>
<p>SELECT * FROM mytable WHREE username=&quot;admin&quot; AND city=&quot;郑州&quot;&nbsp; SELECT * FROM mytable WHREE username=&quot;admin&quot; 而下面几个则不会用到：</p>
<p>SELECT * FROM mytable WHREE age=20 AND city=&quot;郑州&quot;&nbsp; SELECT * FROM mytable WHREE city=&quot;郑州&quot;</p>
<p><strong>（5）建立索引的时机</strong></p>
<p>到这里我们已经学会了建立索引，那么我们需要在什么情况下建立索引呢？一般来说，在WHERE和JOIN中出现的列需要建立索引，但也不完全如此，因为MySQL只对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE才会使用索引。例如：</p>
<p>SELECT t.Name&nbsp; FROM mytable t LEFT JOIN mytable m&nbsp;&nbsp;&nbsp; ON t.Name=m.username WHERE m.age=20 AND m.city='郑州' 此时就需要对city和age建立索引，由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</p>
<p>刚才提到只有某些时候的LIKE才需建立索引。因为在以通配符%和_开头作查询时，MySQL不会使用索引。例如下句会使用索引：</p>
<p>SELECT * FROM mytable WHERE username like'admin%' 而下句就不会使用：</p>
<p>SELECT * FROM mytable WHEREt Name like'%admin' 因此，在使用LIKE时应注意以上的区别。</p>
<p><strong>（6）索引的不足之处</strong></p>
<p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：</p>
<p>◆虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p>
<p>◆建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。</p>
<p>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</p>
<p><strong>（7）使用索引的注意事项</strong></p>
<p>使用索引时，有以下一些技巧和注意事项：</p>
<p>◆索引不会包含有NULL值的列</p>
<p>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p>
<p>◆使用短索引</p>
<p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p>
<p>◆索引列排序</p>
<p>MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p>
<p>◆like语句操作</p>
<p>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like &ldquo;%aaa%&rdquo; 不会使用索引而like &ldquo;aaa%&rdquo;可以使用索引。</p>
<p>◆不要在列上进行运算</p>
<p>select * from users where YEAR(adddate)&lt;2007; 将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成</p>
<p>select * from users where adddate&lt;&lsquo;2007-01-01&rsquo;;&nbsp;</p>
<p>◆不使用NOT IN和&lt;&gt;操作</p>
<p>以上，就对其中MySQL索引类型进行了介绍。</p>      <!--内容关联投票-->
</DIV>